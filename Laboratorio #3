library(readr)
library(tidyr)
library(dplyr)
library(mltools)
library(data.table)
library(ggplot2)


# Importar el archivo
http_data <- read_table("C:\\Users\\Andree\\Documents\\epa-http.csv", col_names = FALSE)
# editar encabezados de las columnas
colnames(http_data) <- c("Direction", "Date", "Method", "Resource", "Protocol", "Responsecode", "Byte")

#Pregunta 1
# Conversiones
http_data$Method <- as.factor(http_data$Method)
http_data$Protocol <- as.factor(http_data$Protocol)
http_data$Responsecode <- as.factor(http_data$Responsecode)
http_data$Byte <- as.numeric(http_data$Byte)
#http_data$Resource <- as.factor(http_data$Resource)
# Conversion de valores NA por 0
http_data$Byte <- ifelse(is.na(http_data$Byte), 0, http_data$Byte)
nrow(http_data)
View(http_data)

#Pregunta 2
# Crear una tabla con las direcciones repetidas y así direcciones únicas
direction_table <- data.frame(Direction = http_data$Direction, Responsecode =http_data$Responsecode) 
concurrences <- as.data.frame(table(direction_table))

# Filtrar valores existentes y ordenarlo ascendente por la columna Responsecode
# 200, 302, 304, 400, 403, 404, 500, 501
direction_data <- filter(concurrences, Freq > 0) 


direction_data <- direction_data %>%
  arrange(Responsecode)
View(direction_data)


code200_data <- direction_data %>% filter(Responsecode == 200)
nrow(code200_data)
code302_data <- direction_data %>% filter(Responsecode == 302)
nrow(code302_data)
code304_data <- direction_data %>% filter(Responsecode == 304)
nrow(code304_data)
code400_data <- direction_data %>% filter(Responsecode == 400)
nrow(code400_data)
code403_data <- direction_data %>% filter(Responsecode == 403)
nrow(code403_data)
code404_data <- direction_data %>% filter(Responsecode == 404)
nrow(code404_data)
code500_data <- direction_data %>% filter(Responsecode == 500)
nrow(code500_data)
code501_data <- direction_data %>% filter(Responsecode == 501)
nrow(code501_data)


#Pregunta 3

# contar la frecuencia
freq_http <- table(http_data$Method)
method_data <- data.frame(http = names(freq_http), freq_http = as.vector(freq_http))
method_data

# Hallar la frecuencia de la columna http, filtrar los tipos de imagen
different_image_data <- http_data %>%
  filter(!grepl("(?i)\\.(gif|jpg|jpeg|png|bmp)$", Resource))

freq_http2 <- table(different_image_data$Method)
method2_data <- data.frame(http = names(freq_http2), freq_http2 = as.vector(freq_http2))

method_data

#Pregunta 4

tabla_frecuencia <-table(http_data$Responsecode)
responsecode_table <- data.frame(Responsecode = names(tabla_frecuencia), 
                                  Frecuencia = as.vector(tabla_frecuencia))


ggplot(responsecode_table, aes(x = Responsecode, y = Frecuencia,  fill = Responsecode)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("#55024a", "#9dab34", "#e16639","#eb214e", "#9ed99e","#9b0800","#82bda7","#f69a0b")) +
  labs(title = "Gráfico de Respuesta",
       x = "Respuesta",
       y = "Frecuencia")

ggplot(responsecode_table, aes(x = "", y = Frecuencia, fill = Responsecode)) +
  geom_bar(stat = "identity", color = "white") +
  coord_polar("y", start = 0) +
  labs(title = "Gráfico de Respuesta",
       fill = "respuesta") +
  theme_void()





#Pregunta 5


http_data_filtered <- http_data[, c("Method", "Responsecode", "Protocol")]

epa_http_one_hot <- one_hot(as.data.table(http_data_filtered), sparsifyNAs = TRUE)

http_data$Resource_size <- nchar(http_data$Resource)

# Agrupar 4 y 3

results2 <- kmeans(epa_http_one_hot, centers = 4)

results3 <- kmeans(epa_http_one_hot, centers = 3)

# Pregunta 6

# Gráfico en base a la columna byte y Resource_size según el tipo de agrupamiento

set.seed(123) 

# Gráfica con cluster 4
# Se usará colores aleatorios
#colores2 <- rainbow(n = length(unique(results2$cluster)))
colores2 <- c("#f06b50", "#8cbfaf", "#fca699", "#91204d")
grap1 <- plot(x = http_data$Byte, y = http_data$Resource_size, col = colores2[results2$cluster], main="Gráfico de 4 clusters")
# se hará la conversión de notación cientifica a númerica
options(scipen = 999)
# Crear leyenda
legend("topright", legend = levels(factor(results2$cluster)), col = colores2, pch = 16)

#Gráfica de Cluster 3

#colores3 <- rainbow(n = length(unique(results3$cluster)))
colores3 <- c("#ad2bad","#00988d", "#dbbf6b")
grap2 <- plot(x = http_data$Byte, y = http_data$Resource_size, col = colores3[results3$cluster], main="Gráfico de 3 clusters")
options(scipen = 999)
# Creando leyenda
legend("topright", legend = levels(factor(results3$cluster)), col = colores3, pch = 16)
